/*
IONOS DBaaS MongoDB REST API

Testing UsersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_UsersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UsersApiService ClustersUsersDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var username string

		resp, httpRes, err := apiClient.UsersApi.ClustersUsersDelete(context.Background(), clusterId, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersApiService ClustersUsersFindById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var username string

		resp, httpRes, err := apiClient.UsersApi.ClustersUsersFindById(context.Background(), clusterId, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersApiService ClustersUsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.UsersApi.ClustersUsersGet(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersApiService ClustersUsersPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var username string

		resp, httpRes, err := apiClient.UsersApi.ClustersUsersPatch(context.Background(), clusterId, username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UsersApiService ClustersUsersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.UsersApi.ClustersUsersPost(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
