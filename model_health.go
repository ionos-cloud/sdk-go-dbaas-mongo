/*
IONOS DBaaS MongoDB REST API

With IONOS Cloud Database as a Service, you have the ability to quickly set up and manage a MongoDB database. You can also delete clusters, manage backups and users via the API.  MongoDB is an open source, cross-platform, document-oriented database program. Classified as a NoSQL database program, it uses JSON-like documents with optional schemas.  The MongoDB API allows you to create additional database clusters or modify existing ones. Both tools, the Data Center Designer (DCD) and the API use the same concepts consistently and are well suited for smooth and intuitive use. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Health The current health status reported by the cluster. * **HEALTHY** Primary exists and number of replicas is equal to specified. * **UNHEALTHY** Primary does not exist or cluster doesn't have majority. * **DEGRADED** Primary exists and number of replicas is less than specified. * **UNKNOWN** The health status is unknown. 
type Health string

// List of Health
const (
	HEALTHY Health = "HEALTHY"
	UNHEALTHY Health = "UNHEALTHY"
	DEGRADED Health = "DEGRADED"
	UNKNOWN Health = "UNKNOWN"
)

// All allowed values of Health enum
var AllowedHealthEnumValues = []Health{
	"HEALTHY",
	"UNHEALTHY",
	"DEGRADED",
	"UNKNOWN",
}

func (v *Health) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Health(value)
	for _, existing := range AllowedHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Health", value)
}

// NewHealthFromValue returns a pointer to a valid Health
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHealthFromValue(v string) (*Health, error) {
	ev := Health(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Health: valid values are %v", v, AllowedHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Health) IsValid() bool {
	for _, existing := range AllowedHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Health value
func (v Health) Ptr() *Health {
	return &v
}

type NullableHealth struct {
	value *Health
	isSet bool
}

func (v NullableHealth) Get() *Health {
	return v.value
}

func (v *NullableHealth) Set(val *Health) {
	v.value = val
	v.isSet = true
}

func (v NullableHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealth(val *Health) *NullableHealth {
	return &NullableHealth{value: val, isSet: true}
}

func (v NullableHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

