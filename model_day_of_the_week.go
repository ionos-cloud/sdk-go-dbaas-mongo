/*
IONOS DBaaS MongoDB REST API

With IONOS Cloud Database as a Service, you have the ability to quickly set up and manage a MongoDB database. You can also delete clusters, manage backups and users via the API.  MongoDB is an open source, cross-platform, document-oriented database program. Classified as a NoSQL database program, it uses JSON-like documents with optional schemas.  The MongoDB API allows you to create additional database clusters or modify existing ones. Both tools, the Data Center Designer (DCD) and the API use the same concepts consistently and are well suited for smooth and intuitive use. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DayOfTheWeek The week day.
type DayOfTheWeek string

// List of DayOfTheWeek
const (
	SUNDAY DayOfTheWeek = "Sunday"
	MONDAY DayOfTheWeek = "Monday"
	TUESDAY DayOfTheWeek = "Tuesday"
	WEDNESDAY DayOfTheWeek = "Wednesday"
	THURSDAY DayOfTheWeek = "Thursday"
	FRIDAY DayOfTheWeek = "Friday"
	SATURDAY DayOfTheWeek = "Saturday"
)

// All allowed values of DayOfTheWeek enum
var AllowedDayOfTheWeekEnumValues = []DayOfTheWeek{
	"Sunday",
	"Monday",
	"Tuesday",
	"Wednesday",
	"Thursday",
	"Friday",
	"Saturday",
}

func (v *DayOfTheWeek) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DayOfTheWeek(value)
	for _, existing := range AllowedDayOfTheWeekEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DayOfTheWeek", value)
}

// NewDayOfTheWeekFromValue returns a pointer to a valid DayOfTheWeek
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDayOfTheWeekFromValue(v string) (*DayOfTheWeek, error) {
	ev := DayOfTheWeek(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DayOfTheWeek: valid values are %v", v, AllowedDayOfTheWeekEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DayOfTheWeek) IsValid() bool {
	for _, existing := range AllowedDayOfTheWeekEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DayOfTheWeek value
func (v DayOfTheWeek) Ptr() *DayOfTheWeek {
	return &v
}

type NullableDayOfTheWeek struct {
	value *DayOfTheWeek
	isSet bool
}

func (v NullableDayOfTheWeek) Get() *DayOfTheWeek {
	return v.value
}

func (v *NullableDayOfTheWeek) Set(val *DayOfTheWeek) {
	v.value = val
	v.isSet = true
}

func (v NullableDayOfTheWeek) IsSet() bool {
	return v.isSet
}

func (v *NullableDayOfTheWeek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDayOfTheWeek(val *DayOfTheWeek) *NullableDayOfTheWeek {
	return &NullableDayOfTheWeek{value: val, isSet: true}
}

func (v NullableDayOfTheWeek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDayOfTheWeek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

